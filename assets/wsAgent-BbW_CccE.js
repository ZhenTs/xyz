import{z as h}from"./index-B2ntl-FI.js";class m{constructor(t={}){const{heartbeatInterval:e=2e3,queueInterval:i=50,heartbeatCmd:n="heart_beat",channel:s="x",autoReconnect:o=!0,maxReconnectAttempts:c=5,reconnectDelay:r=3e3}=t;this.heartbeatInterval=e,this.queueInterval=i,this.heartbeatCmd=n,this.channel=s,this.autoReconnect=o,this.maxReconnectAttempts=c,this.reconnectDelay=r,this.ws=null,this.connected=!1,this.connecting=!1,this.reconnectAttempts=0,this.ack=0,this.seq=1,this._heartbeatTimer=null,this._queueTimer=null,this._reconnectTimer=null,this.sendQueue=[],this.waitingPromises=new Map,this.onOpen=()=>{},this.onClose=()=>{},this.onError=()=>{},this.onMessage=()=>{},this.onReconnect=()=>{}}connect(t,e={}){return this.connecting||this.ws&&this.ws.readyState===WebSocket.OPEN?(console.warn("WebSocket已连接或正在连接中"),Promise.resolve()):new Promise((i,n)=>{try{this.connecting=!0,console.log(`🔗 连接WebSocket: ${t}`),this.ws=new WebSocket(t),this.ws.binaryType="arraybuffer",this.ws.onopen=()=>{this.connecting=!1,this.connected=!0,this.reconnectAttempts=0,console.log("✅ WebSocket连接已建立"),this.seq=1,this._startHeartbeat(),this._startQueueProcessor(),this.onOpen(),i()},this.ws.onmessage=s=>{this._handleMessage(s.data)},this.ws.onclose=s=>{this.connecting=!1,this.connected=!1,this._cleanup(),console.log(`🔌 WebSocket连接已关闭: ${s.code} ${s.reason}`),this.onClose(s),this.autoReconnect&&this.reconnectAttempts<this.maxReconnectAttempts&&this._scheduleReconnect(t,e)},this.ws.onerror=s=>{console.error("❌ WebSocket错误:",s),this.onError(s),this.connecting&&(this.connecting=!1,n(s))}}catch(s){this.connecting=!1,n(s)}})}close(t=1e3,e="normal"){this.autoReconnect=!1,this.ws&&this.ws.close(t,e),this._cleanup()}send(t){Array.isArray(t)?this.sendQueue.push(...t):this.sendQueue.push(t)}sendWithPromise(t){const{cmd:e,body:i={},respKey:n,timeout:s=8e3}=t,o=n||`${e}resp`;return new Promise((c,r)=>{const a=setTimeout(()=>{this.waitingPromises.delete(o),r(new Error(`请求超时: ${e}`))},s);this.waitingPromises.set(o,{resolve:c,reject:r,timeoutId:a}),this.send({cmd:e,body:i,respKey:o})})}_handleMessage(t){try{const e=h.parse(t,this.channel);if(!e){console.warn("消息解析失败");return}console.log("📨 收到消息:",e),e.seq&&(this.ack=e.seq);const i=e.cmd||e.c,n=e.respKey||i;if(n&&this.waitingPromises.has(n)){const{resolve:s,timeoutId:o}=this.waitingPromises.get(n);clearTimeout(o),this.waitingPromises.delete(n),s(e);return}this.onMessage(e)}catch(e){console.error("消息处理失败:",e),this.onError(e)}}_startHeartbeat(){this._stopHeartbeat(),this.heartbeatInterval&&(this._heartbeatTimer=setInterval(()=>{var t;this.connected&&((t=this.ws)==null?void 0:t.readyState)===WebSocket.OPEN&&this._sendHeartbeat()},this.heartbeatInterval))}_stopHeartbeat(){this._heartbeatTimer&&(clearInterval(this._heartbeatTimer),this._heartbeatTimer=null)}_sendHeartbeat(){const t={ack:this.ack,body:void 0,c:void 0,cmd:"_sys/ack",hint:void 0,seq:0,time:Date.now()};this._rawSend(t)}_startQueueProcessor(){this._stopQueueProcessor(),this._queueTimer=setInterval(()=>{this._processQueue()},this.queueInterval)}_stopQueueProcessor(){this._queueTimer&&(clearInterval(this._queueTimer),this._queueTimer=null)}_processQueue(){if(!this.connected||!this.ws||this.ws.readyState!==WebSocket.OPEN||this.sendQueue.length===0)return;const t=this.sendQueue.shift(),e=this._buildPacket(t);this._rawSend(e)}_buildPacket(t){const{cmd:e,body:i={},respKey:n}=t,s=Math.floor(Math.random()*500);return{ack:this.ack,seq:e===this.heartbeatCmd?0:this.seq++,time:Date.now(),cmd:e,body:i,respKey:n,rtt:s,code:0}}_rawSend(t){try{const e=h.encode(t,this.channel);this.ws.send(e)}catch(e){console.error("发送消息失败:",e),this.onError(e)}}_scheduleReconnect(t,e){this._reconnectTimer&&clearTimeout(this._reconnectTimer),this.reconnectAttempts++,console.log(`🔄 计划重连 (${this.reconnectAttempts}/${this.maxReconnectAttempts}) 延迟: ${this.reconnectDelay}ms`),this._reconnectTimer=setTimeout(()=>{console.log(`🔄 开始第${this.reconnectAttempts}次重连...`),this.onReconnect(this.reconnectAttempts),this.connect(t,e).catch(i=>{console.error("重连失败:",i)})},this.reconnectDelay)}_cleanup(){this._stopHeartbeat(),this._stopQueueProcessor(),this._reconnectTimer&&(clearTimeout(this._reconnectTimer),this._reconnectTimer=null);for(const[t,{reject:e,timeoutId:i}]of this.waitingPromises)clearTimeout(i),e(new Error("连接已关闭"));this.waitingPromises.clear()}getStatus(){var t;return{connected:this.connected,connecting:this.connecting,readyState:(t=this.ws)==null?void 0:t.readyState,ack:this.ack,seq:this.seq,queueLength:this.sendQueue.length,waitingPromises:this.waitingPromises.size,reconnectAttempts:this.reconnectAttempts}}static buildUrl(t,e={}){const i=new URL(t);return e.p&&typeof e.p=="object"&&i.searchParams.set("p",JSON.stringify(e.p)),Object.keys(e).forEach(n=>{n!=="p"&&e[n]!==void 0&&i.searchParams.set(n,e[n])}),i.toString()}}export{m as WsAgent,m as default};
